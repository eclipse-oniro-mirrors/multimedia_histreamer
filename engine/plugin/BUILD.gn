# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
import("//foundation/multimedia/histreamer/config.gni")

declare_args() {
  if (hst_is_mini_sys) {
    plugin_dynamic_register = false
  } else {
    plugin_dynamic_register = true
  }
}

if (hst_is_lite_sys) {
  source_set("histreamer_plugin_intf") {
    include_dirs = [
      "//foundation/multimedia/histreamer/engine/include",
      "//foundation/multimedia/histreamer/engine/scene/standard",
      "//foundation/multimedia/media_utils_lite/interfaces/kits"
    ]
    sources = [
      "common/media_sink.cpp",
      "common/media_source.cpp",
      "common/plugin_buffer.cpp",
    ]
    public_configs = [
      "//foundation/multimedia/histreamer:histreamer_presets",
    ]
    if (hst_is_mini_sys) {
      public_deps = [ "//third_party/bounds_checking_function:libsec_static" ]
    } else {
      public_deps = [ "//third_party/bounds_checking_function:libsec_shared" ]
    }
  }
} else {
  ohos_source_set("histreamer_plugin_intf") {
    subsystem_name = "multimedia"
    part_name = "histreamer"
    include_dirs = [
      "//foundation/multimedia/histreamer/engine/include",
      "//foundation/multimedia/histreamer/engine/scene/standard",
      "//foundation/multimedia/histreamer/engine/scene/standard",
      "//foundation/multimedia/player_framework/interfaces/inner_api/native",
    ]
    sources = [
      "common/media_sink.cpp",
      "common/media_source.cpp",
      "common/plugin_buffer.cpp",
    ]
    public_configs = [
      "//foundation/multimedia/histreamer:histreamer_presets",
    ]
    external_deps = [ "bounds_checking_function:libsec_shared" ]
    if (histreamer_enable_video) {
      include_dirs += [
        "//commonlibrary/c_utils/base/include",
        "//drivers/peripheral/display/interfaces/include",
        "//foundation/graphic/graphic_2d/frameworks/surface/include",
        "//foundation/graphic/graphic_2d/interfaces/inner_api/",
        "//foundation/graphic/graphic_2d/utils/sync_fence/export",
      ]
      sources += [
        "common/share_allocator.cpp",
        "common/share_memory.cpp",
        "common/surface_allocator.cpp",
        "common/surface_memory.cpp",
      ]
      external_deps += [
        "graphic_2d:surface",
        "graphic_2d:sync_fence",
      ]
    }
  }
}

if (hst_is_lite_sys) {
  import("//build/lite/config/component/lite_component.gni")
  lite_library("histreamer_plugin_base") {
    if (hst_is_mini_sys) {
      target_type = "static_library"
    } else {
      target_type = "shared_library"
    }
    sources = []
    public_configs = [ "//foundation/multimedia/histreamer:histreamer_presets" ]
    public_deps = [
      ":histreamer_plugin_intf",
      "//foundation/multimedia/histreamer/engine/foundation:histreamer_foundation",
    ]
  }
} else {
  import("//build/ohos.gni")
  ohos_shared_library("histreamer_plugin_base") {
    subsystem_name = "multimedia"
    part_name = "histreamer"
    include_dirs = [
      "//foundation/graphic/graphic_2d/interfaces/inner_api/",
      "//foundation/multimedia/histreamer/engine",
      "//foundation/multimedia/histreamer/engine/include",
      "//foundation/multimedia/histreamer/engine/include/plugin/common",
      "//foundation/multimedia/histreamer/engine/include/plugin/core",
      "//foundation/multimedia/histreamer/engine/scene/standard",
    ]
    public_configs = [ "//foundation/multimedia/histreamer:histreamer_presets" ]
    public_deps = [
      ":histreamer_plugin_intf",
      "//foundation/multimedia/histreamer/engine/foundation:histreamer_foundation",
    ]
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      debug = false
      integer_overflow = true
    }
  }
}

ohos_source_set("ffmpeg_convert") {
  subsystem_name = "multimedia"
  part_name = "histreamer"
  include_dirs = [
    "//foundation/multimedia/histreamer/engine/include",
    "//third_party/ffmpeg",
  ]
  sources = [ "convert/ffmpeg_convert.cpp" ]
  public_configs = [ "//foundation/multimedia/histreamer:histreamer_presets" ]
  public_deps = [
    "//foundation/multimedia/histreamer/engine/foundation:histreamer_foundation",
    "//foundation/multimedia/histreamer/engine/pipeline:histreamer_base",
  ]
  if (hst_is_standard_sys) {
    public_deps += [ "//third_party/ffmpeg:libohosffmpeg" ]
    external_deps = [ "hilog:libhilog" ]
  }
}

if (hst_is_lite_sys) {
  import("//build/lite/config/component/lite_component.gni")
  lite_library("histreamer_ffmpeg_convert") {
    if (hst_is_mini_sys) {
      target_type = "static_library"
    } else {
      target_type = "shared_library"
    }
    sources = []
    deps = [ ":ffmpeg_convert" ]
  }
} else {
  import("//build/ohos.gni")
  ohos_shared_library("histreamer_ffmpeg_convert") {
    subsystem_name = "multimedia"
    part_name = "histreamer"
    include_dirs = [
      "//foundation/multimedia/histreamer/engine/include",
      "//third_party/ffmpeg",
    ]
    deps = [ ":ffmpeg_convert" ]
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      debug = false
      integer_overflow = true
    }
  }
}

ohos_source_set("histreamer_plugin_core") {
  subsystem_name = "multimedia"
  part_name = "histreamer"
  include_dirs = [ "//foundation/multimedia/histreamer/engine/include" ]
  sources = [
    "core/audio_sink.cpp",
    "core/base.cpp",
    "core/codec.cpp",
    "core/demuxer.cpp",
    "core/muxer.cpp",
    "core/output_sink.cpp",
    "core/plugin_core_utils.cpp",
    "core/plugin_manager.cpp",
    "core/plugin_register.cpp",
    "core/plugin_wrapper.cpp",
    "core/source.cpp",
    "core/video_sink.cpp",
  ]
  defines = []
  if (plugin_dynamic_register) {
    sources += [ "core/plugin_loader.cpp" ]
    defines += [ "DYNAMIC_PLUGINS" ]
  }
  public_configs = [
    "//foundation/multimedia/histreamer:histreamer_presets",
  ]
  public_deps = [
    ":histreamer_plugin_base",
    "//foundation/multimedia/histreamer/engine/foundation:histreamer_foundation",
    "plugins:gen_plugin_static_header"
  ]
  if (hst_is_lite_sys) {
    defines += [
      "HST_PLUGIN_PATH=\"/usr/lib\"",
      "HST_PLUGIN_FILE_TAIL=\".so\"",
    ]
    include_dirs += [ "//foundation/multimedia/media_utils_lite/interfaces/kits" ]
    if (hst_is_mini_sys) {
      public_deps += [ "//third_party/bounds_checking_function:libsec_static" ]
    } else {
      public_deps += [ "//third_party/bounds_checking_function:libsec_shared" ]
    }
  } else {
    if (target_cpu == "arm64") {
      hst_plugin_path = "\"/system/lib64/media/histreamer_plugins\""
    } else {
      hst_plugin_path = "\"/system/lib/media/histreamer_plugins\""
    }
    defines += [
      "HST_PLUGIN_PATH=${hst_plugin_path}",
      "HST_PLUGIN_FILE_TAIL=\".z.so\"",
    ]
    include_dirs += [
      "//commonlibrary/c_utils/base/include",
      "//foundation/graphic/graphic_2d/frameworks/surface/include",
      "//foundation/graphic/graphic_2d/interfaces/inner_api/",
      "//foundation/multimedia/player_framework/interfaces/inner_api/native",
      "//drivers/peripheral/display/interfaces/include",
    ]
    public_deps += [ "//third_party/bounds_checking_function:libsec_static" ]
    external_deps = [ "graphic_2d:surface" ]
  }
}

