# Copyright (c) 2021-2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

declare_args() {
  compile_histreamer = true
}

if (compile_histreamer) {
  import("//build/lite/config/component/lite_component.gni")
  import("//build/lite/ndk/ndk.gni")

  gcc_arm_path = getenv("GCCARM")

  print("gcc_arm_path: ", gcc_arm_path)
  shared_library("histreamer") {
    sources = [
      "engine/pipeline/core/compatible_check.cpp",
      "engine/pipeline/core/filter_base.cpp",
      "engine/pipeline/core/pipeline_core.cpp",
      "engine/pipeline/core/port.cpp",
      "engine/pipeline/factory/filter_factory.cpp",
      "engine/pipeline/filters/codec/audio_decoder/audio_decoder_filter.cpp",
      "engine/pipeline/filters/codec/decoder_filter_base.cpp",
      "engine/pipeline/filters/common/plugin_utils.cpp",
      "engine/pipeline/filters/demux/data_packer.cpp",
      "engine/pipeline/filters/demux/demuxer_filter.cpp",
      "engine/pipeline/filters/demux/type_finder.cpp",
      "engine/pipeline/filters/sink/audio_sink/audio_sink_filter.cpp",
      "engine/pipeline/filters/source/media_source_filter.cpp",
      "engine/player/hiplayer.cpp",
      "engine/player/hiplayer_impl.cpp",
      "engine/player/internal/state.cpp",
      "engine/player/internal/state_machine.cpp",
      "engine/plugin/plugins/hdi_adapter/sink/hos_au_sink.cpp",
      "engine/plugin/plugins/hdi_adapter/sink/ring_buffer.cpp",
      "engine/plugin/plugins/hdi_adapter/utils/hdi_au_utils.cpp",
    ]
    defines = [
      "__NEED_wint_t",
      "__STDC_FORMAT_MACROS",
      "MEDIA_OHOS",
    ]
    cflags = [
      "-O2",
      "-fPIC",
      "-Wall",
    ]
    cflags_cc = cflags
    include_dirs = [
      "interface",
      "engine",
      "engine/foundation",
      "engine/foundation/osal",
      "engine/pipeline",
      "engine/player",
      "engine/pipeline/filters",
      "engine/pipeline/core",
      "engine/plugin",
      "${gcc_arm_path}/../arm-none-eabi/include",
      "//foundation/multimedia/media_lite/interfaces",
      "//foundation/multimedia/drivers/audio/include",
      "//foundation/multimedia/drivers/codec/include",
      "//foundation/multimedia/drivers/format/include",
      "//foundation/multimedia/utils/lite/interfaces/kits",
      "//foundation/multimedia/media_lite/interfaces/kits/player_lite",
      "//kernel/liteos_m/kal/posix/include",
      "//kernel/liteos_m/kernel/include",
      "//kernel/liteos_m/kernel/arch/include",
      "//drivers/peripheral/audio/interfaces/include",
      "//drivers/peripheral/base",
      "//drivers/peripheral/audio/hal/hdi_binder/proxy/include",
      "//drivers/peripheral/audio/interfaces/include",
      "//third_party/ffmpeg",
      "//third_party/bounds_checking_function/include",
    ]
    outdir = rebase_path("$root_out_dir")

    #public_configs = [ ":player_external_library_config" ]
    ldflags = [ "-L$outdir" ]
    ldflags += [ "-laudio_hw" ]
    ldflags += [ "-lcodec" ]
    ldflags += [ "-lavformat" ]
    ldflags += [ "-lavcodec" ]
    ldflags += [ "-lavutil" ]
    ldflags += [ "-lhdi_videodisplayer" ]

    deps = [
      "engine/foundation:histreamer_foundation",
      "engine/plugin:histreamer_plugin",
      "//device/hisilicon/hardware:hardware_media_sdk",
      "//device/hisilicon/modules/middleware:middleware_source_sdk",
      "//foundation/graphic/surface:lite_surface",
    ]
    public_deps = [
      "//foundation/multimedia/utils/lite:media_common",

      #"//kernel/liteos_m/kal/posix:posix",
      "//third_party/bounds_checking_function:libsec_shared",
    ]
  }
} else {
  import("//build/ohos.gni")

  group("histreamer_packages") {
    deps = [
      "//third_party/glib:glib_packages",
      "//third_party/gstreamer/gst_libav:gst_libav_packages",
      "//third_party/gstreamer/gstplugins_bad:gstplugins_bad_packages",
      "//third_party/gstreamer/gstplugins_base:gstplugins_base_packages",
      "//third_party/gstreamer/gstplugins_good:gstplugins_good_packages",
      "//third_party/gstreamer/gstreamer:gstreamer_packages",
      "//third_party/libffi:ffi",
    ]
  }
}
